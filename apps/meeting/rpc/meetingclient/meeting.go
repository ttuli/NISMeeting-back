// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: meeting.proto

package meetingclient

import (
	"context"

	"Meeting/apps/meeting/rpc/meeting"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateMeetingReq   = meeting.CreateMeetingReq
	CreateMeetingResp  = meeting.CreateMeetingResp
	HistoryMeetingReq  = meeting.HistoryMeetingReq
	HistoryMeetingResp = meeting.HistoryMeetingResp
	JoinMeetingReq     = meeting.JoinMeetingReq
	JoinMeetingResp    = meeting.JoinMeetingResp
	MeetingEntity      = meeting.MeetingEntity

	Meeting interface {
		CreateMeeting(ctx context.Context, in *CreateMeetingReq, opts ...grpc.CallOption) (*CreateMeetingResp, error)
		JoinMeeting(ctx context.Context, in *JoinMeetingReq, opts ...grpc.CallOption) (*JoinMeetingResp, error)
		HistoryMeeting(ctx context.Context, in *HistoryMeetingReq, opts ...grpc.CallOption) (*HistoryMeetingResp, error)
	}

	defaultMeeting struct {
		cli zrpc.Client
	}
)

func NewMeeting(cli zrpc.Client) Meeting {
	return &defaultMeeting{
		cli: cli,
	}
}

func (m *defaultMeeting) CreateMeeting(ctx context.Context, in *CreateMeetingReq, opts ...grpc.CallOption) (*CreateMeetingResp, error) {
	client := meeting.NewMeetingClient(m.cli.Conn())
	return client.CreateMeeting(ctx, in, opts...)
}

func (m *defaultMeeting) JoinMeeting(ctx context.Context, in *JoinMeetingReq, opts ...grpc.CallOption) (*JoinMeetingResp, error) {
	client := meeting.NewMeetingClient(m.cli.Conn())
	return client.JoinMeeting(ctx, in, opts...)
}

func (m *defaultMeeting) HistoryMeeting(ctx context.Context, in *HistoryMeetingReq, opts ...grpc.CallOption) (*HistoryMeetingResp, error) {
	client := meeting.NewMeetingClient(m.cli.Conn())
	return client.HistoryMeeting(ctx, in, opts...)
}
