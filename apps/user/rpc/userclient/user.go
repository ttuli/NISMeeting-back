// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: user.proto

package userclient

import (
	"context"

	"Meeting/apps/user/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoginReq       = user.LoginReq
	LoginResp      = user.LoginResp
	PingReq        = user.PingReq
	PingResp       = user.PingResp
	RegisterReq    = user.RegisterReq
	RegisterResp   = user.RegisterResp
	UpdateInfoReq  = user.UpdateInfoReq
	UpdateInfoResp = user.UpdateInfoResp
	UserEntity     = user.UserEntity

	User interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		UpdateInfo(ctx context.Context, in *UpdateInfoReq, opts ...grpc.CallOption) (*UpdateInfoResp, error)
		Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
		Offline(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) UpdateInfo(ctx context.Context, in *UpdateInfoReq, opts ...grpc.CallOption) (*UpdateInfoResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UpdateInfo(ctx, in, opts...)
}

func (m *defaultUser) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultUser) Offline(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Offline(ctx, in, opts...)
}
